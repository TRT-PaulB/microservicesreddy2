{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;\f2\froman\fcharset0 Times-Roman;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 HelveticaNeue-Bold;\f5\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red43\green39\blue19;\red235\green236\blue237;\red36\green38\blue41;
\red0\green0\blue233;\red0\green0\blue0;\red100\green100\blue100;\red42\green0\blue255;\red0\green104\blue218;
\red0\green0\blue233;\red0\green128\blue128;\red63\green127\blue127;\red34\green79\blue188;\red27\green29\blue31;
\red38\green38\blue38;\red255\green255\blue255;\red10\green77\blue204;\red249\green250\blue251;\red70\green77\blue86;
}
{\*\expandedcolortbl;;\cssrgb\c22353\c20000\c9412;\cssrgb\c93725\c94118\c94510;\cssrgb\c18824\c20000\c21176;
\cssrgb\c0\c0\c93333;\csgray\c0;\csgenericrgb\c39216\c39216\c39216;\csgenericrgb\c16471\c0\c100000;\csgenericrgb\c0\c40784\c85490;
\cssrgb\c0\c0\c93333;\csgenericrgb\c0\c50196\c50196;\csgenericrgb\c24706\c49804\c49804;\csgenericrgb\c13206\c30848\c73913;\cssrgb\c14118\c15294\c16078;
\cssrgb\c20000\c20000\c20000;\cssrgb\c100000\c100000\c100000;\cssrgb\c1176\c40000\c83922;\cssrgb\c98039\c98431\c98824;\cssrgb\c34510\c37647\c41176;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15520\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
==========================================================\
==========================================================
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\tx13674\tx13752\pardirnatural\partightenfactor0
\cf0 MICROSERVICE Migration From Monolithic Applications\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
==========================================================\
==========================================================
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
Check java jdk in Mac:  
\f0\fs26 \cf4 \cb3 \expnd0\expndtw0\kerning0
/usr/bin/java -version\
\
COURSE CONTENT:\
Local: micro=JavaWorkspaceMicro\
GitHub: MicroservicesReddy2\
\
Course:\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.udemy.com/course/practical-world-java-spring-microservices/learn/lecture/10912918#questions"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul \ulc5 https://www.udemy.com/course/practical-world-java-spring-microservices/learn/lecture/10912918#questions}}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 \
Revise:\
- sections 1 - 8\
- overcome permissions issue\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 ==========================================================\cf4 \
SECTION 2\
\
Install: \
-\'97> JDK\
-\'97> MySQL\
\'97-> Tomcat 8 [
\fs22 \cf6 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 /Users/paulbickell/Documents
\fs26 \cf4 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 ]\
-\'97> Git\
-\'97> Mvn\
-\'97> Gradle\
\
7) JPA definitions and yml layout\
\
8) ddl.sql + data.sql\
\
\cf2 ==========================================================\
SECTION 3 - The Monolithic Original App\
\
\'97-> Monolith:  \
    rollingstone-monolithic-ecommerce-shopping-api\
\
This is an old fashioned spring MVC MVN app, \
not a spring boot app\
\
12 - 14) Pain of monoliths:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 - difficulty of testing\
  Make change to pricing, testing necessary for entire structure\
  as it is not decoupled. So unnecessary testing is required. \
- monolith as say 50 apis. If 1 has a memory leak, but it is hard\
  to identify. Eg:\
  \'97 Pricing controller issue, load testing issue, kills monolith \
  - Delivery, Shipping, Products apis rely on Pricing api, so affected\
\
++> reducing time to market\
++> can isolate issue quickly, eg memory leak in production\
\
..and of course:\
++> flexibility\
++> cross department\
++> self contained and decoupled\
    one part failing does not stop other services delivering\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
==========================================================\
SECTION 4 - spring boot\
\
Create basic new spring boot app \'91Poc\'92, {\field{\*\fldinst{HYPERLINK "https://start.spring.io/"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul \ulc5 https://start.spring.io/}}:\
\'97> web\
\'97> actuator\
\
Create RestController with 
\fs24 \cf7 \cb1 \kerning1\expnd0\expndtw0 @GetMapping\cf0 (\cf8 \'93/\'93\cf0 ):
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
Mac import: CMD + SHIFT + O\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 ==> Convention over configuration, and parent starter includes:\
    - reads application*.properties / yml / yaml red by default \
      if included in application \cf2 \
    - starterWebPom:\
      Getting SpringMVC, validator\
      Spring\
\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul \ulc5 https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project}}
\f2\fs24 \cf5 \cb1 \ul \ulc5 \
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs26 \cf2 \cb3 \ulnone - starters:\
  spring-boot-starter-web has starter tomcat, EL, SpringMVC etc\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \'97-> mvn clean. (Basically removes deployment / target folder) \
\'97-> mvn clean package. (Downloads dependencies afresh, so first time longer)\
                       It also regenerates the created target folder\
\
\'97-> see target for running alternative to:\
   ./mvnw spring-boot:run\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs22 \cf6 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0     java -jar target/Poc-0.0.1-SNAPSHOT.jar
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1  (runs independently)\
   (original.jar runs just the app) \
\
    Sets up web project with integrated Tomcat, and potentially\
    An integrated MySQL instance\
    \
\cf4 ==> Spring Boot ACTUATOR gives you default performance metrics:\
    \'97-> how much memory is left\
    \'97-> how many threads running\
\
    Set basic actuator up in on port 8091 in application.yml:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2     
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 management:\
\pard\pardeftab720\partightenfactor0
\cf0       server:\
        port: 8091
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul           {\field{\*\fldinst{HYPERLINK "http://localhost:8091/actuator"}}{\fldrslt http://localhost:8091/actuator}}
\f0\fs26 \cf2 \cb3 \ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
    Advanced Actuator:\
\
    
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 management:\
\pard\pardeftab720\partightenfactor0
\cf0       server:\
        port: 8091
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2       endpoints:\
        web:\
          exposure:\
            include: \'93*\'94 \
\
    --> tell actuator to include all endpoints\
\
    eg:\
    - beans [USEFUL] ==> output spring beans for application\
    - conditions ==> ie for spring\
    - config props\
    - env ==> shows timezone and env variables\
    - heap dump ==> dumps a file\
    - metrics\
    - http trace\
    - mappings [USEFUL]\
\
==========================================================\cf4 \
SECTION 5 - Part Migration and Exceptions\
\
- Migrate product API\
  rollingstone-ecommerce-product-api\
  -\cf2 \'97> web\
  \'97-> actuator\
  \'97-> JPA\
  \'97-> MySQL\cf4 \
\
  But add to this from MVNRepository:\
  \'97-> com.fasterxml.jackson.core\
      ArtifactId = Jackson-databind\
      Latest version (but omit this Kline from MVN)\
  \'97-> io.springfox\
      ArtifactId = springfox-swagger2 \
      Include latest version in MVN\
  \'97-> io.springfox\
      ArtifactId = springfox-swagger-ui \
      Include latest version in MVN\
\
Jackson databank is used for marshalling and unmarshalling\
XML to JSON and vice versa\
\
Add packages: com.micro + spring + [package]\
- model, dao, service\
\
Migration based on fact that monolith was working - reuse code:\
- model classes: ie Product + Category\
     - Product:  @id = primary key\
                 Note 2 joins to Category field\
     - hashcode\
\cf2 \
- Dao classes:\
  \'97 too complex, so do not migrate - create our own\
    but we are also removing redundant code\
  - extend 
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \ul \ulc0 PagingAndSortingRepository
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\ulnone \
  - note that only findAll() is required in repository,\
    As the other CRUDS are offered out of the box\
  - JPA is interface, Hibernate is the implementation\
  - use slf4j for logging, as you can switch implementation\
    in the same was as changing persistence implementation \
  - remove Transactional annotations\
  - Interface: save method to return Product\
               Get use Optional\
               Use findById\
  - change list() to paging method, see method in ProductService\
     \
- Controller class\
  \'97> copy ProductController\
  -> in get all method\
     \'97> replace return value: 
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 ResponseEntity<List<Product>>
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
     \'97> use @ResponseBody to send data back to client \
     \'97> use @RequestParam to take paging values\
     \'97> just return 
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 Page<Product>, and spring will take \
         take of JSON conversion
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
  -> set application properties for embedded tomcat,\
     MySQL database and hibernate\
\
==> test the Microservice for product api:\
    \'97> Run this migrated Microservice!   \
    \'97> see postman.txt\
\
==> create aspects package and class\
    \'97> notice pointcuts defined\
    \'97> parallel to triggers in Oracle DB\
    -> keeps aspects in same package\
\
==> add in exceptions\
\
==> event handling for the product system area:\
    \'97> create productEvent\
    -> add productEventListener\
    \'97> add in AbstractController\
    \'97> update ProductController (exceptions and events):\
       \'97> handle exceptions already thrown\
       -> explicitly throw check resource found exceptions \
          as required\
       -> listen for events\
\
==> static and templates folder are unnecessary, so remove them\
    From resources \
\
==> create application.yml for configuring the Actuator\
    \'97> actuator port\
    \'97> expose all endpoints\
    \'97> health endpoint details\
\
=> update application.yml to show endpoints:\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 management:\
  server:\
    port: 8091\
  \ul endpoints\ulnone :\
    web:\
      exposure:\
        include: "*"\
  \ul endpoint\ulnone :\
    health:\
      show-details: "always"
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul \ulc5 	{\field{\*\fldinst{HYPERLINK "http://localhost:8091/actuator/health"}}{\fldrslt http://localhost:8091/actuator/health}}
\f0\fs26 \cf2 \cb3 \ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
- No1 for actuator server and port\
- No2 makes spring boot expose all the endpoints\
- No3 needed for more details on health endpoint\
\
- Health of MySQL included if it is on your path!\
- Metrics:   \
  {\field{\*\fldinst{HYPERLINK "http://localhost:8091/actuator/metrics"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul http://localhost:8091/actuator/metrics}} + metric\
\
Note that when updating the product, it increments the id which \
cannot be right.\
Seems the id needs to be in both the url as a variable AND the \
body of the full product object to be changed - then the updated \
product does not have an increased id\
\
==========================================================\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 SECTION 6 - Spring Cloud Microservices Service Discovery\cf2  \
            (Microservice \'91Discovery\'92 design pattern)\
\
\'97-> A way to decouple services\
\
Conceptually like looking up services on google such as eateries,\
Garages, supermarkets, with google selecting relevant \
(eg by location) and rating - so a thin client not a big \
yellow pages. Advantages:\
\'97> if data changes, no need to reprint and distribute the yellow\
   pages!\
\
All services instantiated and running inside a container maybe\'85..\
And once they start up THEY SEND their location information to\
a service registry (we will use spring cloud)\
eg. \
- Product content\
- Pricing\
- shipping\
- Add to Cart\
- Checkout\
 \
\'97> problem is that if clients specify exactly the backend service,\
   port and url / ipaddresses of the servers they want to use, \
   then if a service instance goes down, the the client breaks\
\
\'97> so made loosely coupled by clients querying Eureka service with\
   a logical name (see bootstrap.yml)\
   The service you want to call has itself registered the logical\
   name of Eureka\
\
\'97> so for example suppose there are 5 Product services registered\
   against the same logical name, but services will all be running\
   on different ip addresses\
\
\'97> google PULLS information from website \'97> PULL BASED\
\'97> the services actively PUSH their data to a service \
   registry \'97> spring cloud microservices are PUSH BASED\
\
\'97> so the Eureka registry holds a list of URLs against a single \
   logical name\
\
\'97> every few seconds, each of the registered micro services need to\
   send their health information to Eureka (ie regular heartbeats)\
\
   ADVANTAGES OF SERVICE DISCOVERY\
\
\'97> decouples services from clients \
   -> (no hardcoding IP address in client)\
   -> more resilient if a service goes down\
\'97> advanced load balancing and high availability, and a central hub\
   for orchestration + supplies health information\
   ==> NOTE: it is critical that each of the Eureka instances to\
             know about all the others\
\
   CREATE A DISCOVERY SERVICE\
\
Create new project using spring initialiser:\
\'97> rollingstone-ecommerce-eureka-service-discovery\
\'97> dependencies:  Eureka Server, Actuator \
                  (Eureka Discovery not required as this is for clients\
             \
\
\'97> apply to main method: @SpringBootApplication 
\fs24 \cf7 \cb1 \kerning1\expnd0\expndtw0 @EnableEurekaServer
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
-> delete the empty application.properties \
          + create application.yml + bootstrap.yml\
\
   .yml shows properties in a hierarchy\
   \'97> bootstrap.yml is read early when spring cloud app starts up\
\
   -> bootstrap: put in application name\
   -> application:\
      \'97-> hostname\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2       \'97-> dynamic URL\
\
Just for the sake of running the service discovery app, set\
registerWithEureka & fetchRegistry to false, as there is as yet\
no other service to communicate with\
\
Run discovery service:\
Note that this is a known error (expected!)\
\pard\pardeftab720\partightenfactor0

\fs24 \cf9 \cb1 \kerning1\expnd0\expndtw0 \ul \ulc9 java.net.URISyntaxException\cf0 \ulnone : Illegal character in authority at \
index 7: http://localhost:$\{server.port\}/eureka/
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
Set the port in the registration service properties, and then\
view Eureka:\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://localhost:8761/"}}{\fldrslt 
\f2\fs24 \cf10 \cb1 \ul \ulc10 \outl0\strokewidth0 \strokec10 http://localhost:8761/}}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
-\'97> this details every micro service that has registered with Eureka\
-\'97> applications display their logical names as defined in the\
    bootstrap.yml file\
\
==========================================================\
SECTION 7: Client Service Registration\
\
Register the product api micro service with the (client)\
service registry app created in section 6.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
Server side checklist:\
- create the a service registry server with Eureka and check \
  it is compliant with latest version of Spring Cloud (ch 6)\
\
  Go to: projects.spring.io/spring-cloud/\
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf10 \cb1 \ul \ulc10 \outl0\strokewidth0 \strokec10                         {\field{\*\fldinst{HYPERLINK "https://spring.io/projects/spring-cloud"}}{\fldrslt https://spring.io/projects/spring-cloud}}
\f0\fs26 \cf2 \cb3 \ulnone \outl0\strokewidth0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2      Get the spring boot used by the cloud\'85. \
\
  And check that this matches wit the spring boot\
  starter parent spring boot version in pom of server registry \
  app (or change it to match):\
   
\fs24 \cf11 \cb1 \kerning1\expnd0\expndtw0 <\cf12 parent\cf11 >\cf0 \
\pard\pardeftab720\partightenfactor0
\cf0 		\cf11 <\cf12 groupId\cf11 >\cf0 org.springframework.boot\cf11 </\cf12 groupId\cf11 >\cf0 \
		\cf11 <\cf12 artifactId\cf11 >\cf0 spring-boot-starter-parent\cf11 </\cf12 artifactId\cf11 >\cf0 \
		\cf11 <\cf12 version\cf11 >\cf0 2.2.2.RELEASE\cf11 </\cf12 version\cf11 >\cf0 \
		\cf11 <\cf12 relativePath\cf11 />\cf0  \
    \cf11 </\cf12 parent\cf11 >\
\
    Then refresh the maven repository:\
    Go into .m2 directory in the terminal\
    rm -R repository/\
    \
    The go to registration service:\
       \'97> MAVEN: update project
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
- Build registry micro service (mvn clean package) to create \
  a jar for the app (do from registration app package)\
- Run the registry app with command:\
  java -jar target/[created_jar].jar\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2   java -jar target/
\fs22 \cf1 \cb13 \kerning1\expnd0\expndtw0 \CocoaLigature0 rollingstone-ecommerce-eureka-service-discovery-0.0.1-SNAPSHOT.jar
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 \
- visit the registry site to verify registration:\
  {\field{\*\fldinst{HYPERLINK "http://localhost:8761/"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul \ulc5 http://localhost:8761/}}\
\
Client side checklist - product-api (with the server side running)\
- Open the pom of the client (ie product api)\
- Get the latest version from the spring cloud site\
  {\field{\*\fldinst{HYPERLINK "https://spring.io/projects/spring-cloud"}}{\fldrslt 
\f2\fs24 \cf10 \cb1 \ul \ulc10 \outl0\strokewidth0 \strokec10 https://spring.io/projects/spring-cloud}} \
- include spring cloud maven dependency, because it is only possible\
  to to inherit from 1 parent in spring boot.\
  \'97> use 
\fs24 \cf12 \cb1 \kerning1\expnd0\expndtw0 dependencyManagement element. (See spring cloud website)\
      {\field{\*\fldinst{HYPERLINK "https://spring.io/blog/2019/09/12/spring-cloud-greenwich-sr3-released"}}{\fldrslt 
\f2 \cf5 \expnd0\expndtw0\kerning0
\ul \ulc5 https://spring.io/blog/2019/09/12/spring-cloud-greenwich-sr3-released}}
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
 \
- now add a dependency for:\
  
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 spring-cloud-starter-netflix-eureka-client
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
- add bootstrap.yml and specify the name of this product api client micro service\
- register this product service client with the registration server\
  in applications.yml file: \
  eureka:client:serviceUrl:defaultZone: http://localhost:8761/eureka\
- @EnableDiscoveryClient on main application\
- mvn clean package of product api\
- Now run product-api in a different shell to server\
  Discovery app\
  (Note it registers the service in the console,\
   Check this out in the registration Eureka server: {\field{\*\fldinst{HYPERLINK "http://localhost:8761/"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul \ulc5 http://localhost:8761/}}\
   \'97> java -jar target/[created_jar].jar\
   => So this is service registry from he client side\'85.\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 ==========================================================\
==========================================================\
==========================================================\
==========================================================\
==========================================================\
==========================================================\
==========================================================\
Deploy: (ignore error in stack trace)\
\'97> localhost:
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 8761
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
  (shows up on Eureka see application.yml)\
\'97> actuator health also states UP:\
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul         {\field{\*\fldinst{HYPERLINK "http://localhost:8080/actuator"}}{\fldrslt \cf5 http://localhost:8080/actuator}}
\f0\fs26 \cf2 \cb3 \ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
Port already in use:\
\'97> Find processes on 8080:  \cf14 netstat -vanp tcp | grep 3000\
\cf2 -> kill it \
\
\pard\pardeftab720\sl360\partightenfactor0
\cf15 \cb16 \outl0\strokewidth0 \strokec15 lsof -i :
\f3\b port.  (All process names with id on Unix)
\f0\b0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \cb3 \outl0\strokewidth0 \
==========================================================\
\
\
==========================================================\
SPRING CLOUD MICROSERVICES REMOTE CONFIG\
\
Microservice Remote Config Service \
- promotes loose coupling of services\
(also a microservices design pattern)\
\
Avoid hardcoding URLs to a single point of failure eg.\
When a server goes down containing critical instance\
\
Danger of defining these in 1 place, or having to maintain\
this same info in many different places:\
- db urls, username + pass\
- message broker perl username + pass\
- Internationalization I118N messages\
\
\
- SO: use remote config service with profiles\
  \'97> decouples microservices from env vars to single point\
     of truth \
  -> do not have to change between dev, test and prod\
\
NOTE: IN PRODUCTION\
\
Microservices layer (product, pricing, delivery etc)\
\'97-> load balancer\
    \'97> remote config service cluster (on multiple machines)\
       \'97> highly available GitHub cluster\
          \'97> GitHub Highly available storage:\
             Micorservice-root\
               Product\
                 Application-dev.yml\
                 Application-prod.yml\
               Payment \
                 [some other yml files etc]\
\
\
**!!!!\
For each micro service, transfer the application.yml to\
a remote GitHub repository\'92s \
\
Removed lines transferring from product-api -> mysql.yml:
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf0 server:\
  port: 8081\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\
\'97-> remove git from monolith-micro-remote-config\
\'97-> save public key from TRT and delete, put into new account\
\'97-> create repository in the new git: {\field{\*\fldinst{HYPERLINK "https://github.com/TRT-PaulB/monolith-micro-remote-config"}}{\fldrslt 
\f4\b\fs36 \cf17 \cb18 \ul \ulc17 monolith-micro-remote-config}}
\f5\fs36 \cf19 \cb18 \

\f0\fs26 \cf2 \cb3 \'97-> init remote with the contents of monolith-micro-remote-config\
\'97-> update the username, pass and uri\
    In pb-ecommerce-remote-config-service / application.yml\
\
\
==> upload code to:\
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul            {\field{\*\fldinst{HYPERLINK "https://github.com/PaulJames4748/pb-monolith-micro-remote-config"}}{\fldrslt \cf5 \ulc5 https://github.com/PaulJames4748/pb-monolith-micro-remote-config}}\

\f0\fs26 \cf2 \cb3 \ulnone \
    TEST THE REMOTE CONFIG SERVICE \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 ==> Run the remote config service as a spring boot app\
\
==> test product api in browser\
    Make changes and be sure they are picked up in the browser.\
    Can the localyml files actually be removed?\
    localhost:9000/pb-eccommerce-product-api/mysql\
\
\
==> implement further modules\
    implement the same for:\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \ul \ulc0     pb\ulnone -\ul ecommerce\ulnone -category-\ul api\ulnone , \ul pb\ulnone -\ul ecommerce\ulnone -pricing-\ul api
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
==> test category and pricing\
\
==========================================================\
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul \ulc5 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 \ulnone \
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul \ulc5 \
\pard\pardeftab720\sl280\partightenfactor0
\cf5 \ulc5 \
\
\
\
\
\
\
\
\
\
\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/rollingstoneecomm/rollingstone-ecommerce-remote-config-repository"}}{\fldrslt \cf5 \ulc5 \uc0\u8776 }}}