{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fswiss\fcharset0 Helvetica;\f2\froman\fcharset0 Times-Roman;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 Menlo-BoldItalic;\f5\fnil\fcharset0 Menlo-Italic;
\f6\fnil\fcharset0 HelveticaNeue-Bold;\f7\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red43\green39\blue19;\red235\green236\blue237;\red36\green38\blue41;
\red0\green0\blue233;\red0\green0\blue0;\red100\green100\blue100;\red42\green0\blue255;\red127\green0\blue85;
\red0\green0\blue192;\red27\green29\blue31;\red63\green95\blue191;\red10\green77\blue204;\red249\green250\blue251;
\red70\green77\blue86;}
{\*\expandedcolortbl;;\cssrgb\c22353\c20000\c9412;\cssrgb\c93725\c94118\c94510;\cssrgb\c18824\c20000\c21176;
\cssrgb\c0\c0\c93333;\csgray\c0;\csgenericrgb\c39216\c39216\c39216;\csgenericrgb\c16471\c0\c100000;\csgenericrgb\c49804\c0\c33333;
\csgenericrgb\c0\c0\c75294;\cssrgb\c14118\c15294\c16078;\csgenericrgb\c24706\c37255\c74902;\cssrgb\c1176\c40000\c83922;\cssrgb\c98039\c98431\c98824;
\cssrgb\c34510\c37647\c41176;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh20960\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
==========================================================\
==========================================================
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\tx13674\tx13752\pardirnatural\partightenfactor0
\cf0 MICROSERVICE Migration From Monolithic Applications\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
==========================================================\
==========================================================
\f1\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
Check java jdk in Mac:  
\f0\fs26 \cf4 \cb3 \expnd0\expndtw0\kerning0
/usr/bin/java -version\
\
COURSE CONTENT:\
Local: micro=JavaWorkspaceMicro\
GitHub: MicroservicesReddy2\
\
Course:\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://www.udemy.com/course/practical-world-java-spring-microservices/learn/lecture/10912918#questions"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul \ulc5 https://www.udemy.com/course/practical-world-java-spring-microservices/learn/lecture/10912918#questions}}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 \
Revise:\
- sections 1 - 8\
- overcome permissions issue\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 ==========================================================\cf4 \
SECTION 2\
\
Install: \
-\'97> JDK\
-\'97> MySQL\
\'97-> Tomcat 8 [
\fs22 \cf6 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0 /Users/paulbickell/Documents
\fs26 \cf4 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1 ]\
-\'97> Git\
-\'97> Mvn\
-\'97> Gradle\
\
7) JPA definitions and yml layout\
\
8) ddl.sql + data.sql\
\
\cf2 ==========================================================\
SECTION 3 - The Monolithic Original App\
\
\'97-> Monolith:  \
    rollingstone-monolithic-ecommerce-shopping-api\
\
This is an old fashioned spring MVC MVN app, \
not a spring boot app\
\
12 - 14) Pain of monoliths:\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 - difficulty of testing\
  Make change to pricing, testing necessary for entire structure\
  as it is not decoupled. So unnecessary testing is required. \
- monolith as say 50 apis. If 1 has a memory leak, but it is hard\
  to identify. Eg:\
  \'97 Pricing controller issue, load testing issue, kills monolith \
  - Delivery, Shipping, Products apis rely on Pricing api, so affected\
\
++> reducing time to market\
++> can isolate issue quickly, eg memory leak in production\
\
..and of course:\
++> flexibility\
++> cross department\
++> self contained and decoupled\
    one part failing does not stop other services delivering\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
==========================================================\
SECTION 4 - spring boot\
\
Create basic new spring boot app \'91Poc\'92, {\field{\*\fldinst{HYPERLINK "https://start.spring.io/"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul \ulc5 https://start.spring.io/}}:\
\'97> web\
\'97> actuator\
\
Create RestController with 
\fs24 \cf7 \cb1 \kerning1\expnd0\expndtw0 @GetMapping\cf0 (\cf8 \'93/\'93\cf0 ):
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
Mac import: CMD + SHIFT + O\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf4 ==> Convention over configuration, and parent starter includes:\
    - reads application*.properties / yml / yaml red by default \
      if included in application \cf2 \
    - starterWebPom:\
      Getting SpringMVC, validator\
      Spring\
\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul \ulc5 https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project}}
\f2\fs24 \cf5 \cb1 \ul \ulc5 \
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs26 \cf2 \cb3 \ulnone - starters:\
  spring-boot-starter-web has starter tomcat, EL, SpringMVC etc\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \'97-> mvn clean. (Basically removes deployment / target folder) \
\'97-> mvn clean package. (Downloads dependencies afresh, so first time longer)\
                       It also regenerates the created target folder\
\
\'97-> see target for running alternative to:\
   ./mvnw spring-boot:run\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs22 \cf6 \cb1 \kerning1\expnd0\expndtw0 \CocoaLigature0     java -jar target/Poc-0.0.1-SNAPSHOT.jar
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\CocoaLigature1  (runs independently)\
   (original.jar runs just the app) \
\
    Sets up web project with integrated Tomcat, and potentially\
    An integrated MySQL instance\
    \
\cf4 ==> Spring Boot ACTUATOR gives you default performance metrics:\
    \'97-> how much memory is left\
    \'97-> how many threads running\
\
    Set basic actuator up in on port 8091 in application.yml:\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2     
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 management:\
\pard\pardeftab720\partightenfactor0
\cf0       server:\
        port: 8091
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul           {\field{\*\fldinst{HYPERLINK "http://localhost:8091/actuator"}}{\fldrslt http://localhost:8091/actuator}}
\f0\fs26 \cf2 \cb3 \ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
    Advanced Actuator:\
\
    
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 management:\
\pard\pardeftab720\partightenfactor0
\cf0       server:\
        port: 8091
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2       endpoints:\
        web:\
          exposure:\
            include: \'93*\'94 \
\
    --> tell actuator to include all endpoints\
\
    eg:\
    - beans [USEFUL] ==> output spring beans for application\
    - conditions ==> ie for spring\
    - config props\
    - env ==> shows timezone and env variables\
    - heap dump ==> dumps a file\
    - metrics\
    - http trace\
    - mappings [USEFUL]\
\
==========================================================\cf4 \
SECTION 5 - Part Migration and Exceptions\
\
- Migrate product API\
  rollingstone-ecommerce-product-api\
  -\cf2 \'97> web\
  \'97-> actuator\
  \'97-> JPA\
  \'97-> MySQL\cf4 \
\
  But add to this from MVNRepository:\
  \'97-> com.fasterxml.jackson.core\
      ArtifactId = Jackson-databind\
      Latest version (but omit this Kline from MVN)\
  \'97-> io.springfox\
      ArtifactId = springfox-swagger2 \
      Include latest version in MVN\
  \'97-> io.springfox\
      ArtifactId = springfox-swagger-ui \
      Include latest version in MVN\
\
Jackson databank is used for marshalling and unmarshalling\
XML to JSON and vice versa\
\
Add packages: com.micro + spring + [package]\
- model, dao, service\
\
Migration based on fact that monolith was working - reuse code:\
- model classes: ie Product + Category\
     - Product:  @id = primary key\
                 Note 2 joins to Category field\
     - hashcode\
\cf2 \
- Dao classes:\
  \'97 too complex, so do not migrate - create our own\
    but we are also removing redundant code\
  - extend 
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \ul \ulc0 PagingAndSortingRepository
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\ulnone \
  - note that only findAll() is required in repository,\
    As the other CRUDS are offered out of the box\
  - JPA is interface, Hibernate is the implementation\
  - use slf4j for logging, as you can switch implementation\
    in the same was as changing persistence implementation \
  - remove Transactional annotations\
  - Interface: save method to return Product\
               Get use Optional\
               Use findById\
  - change list() to paging method, see method in ProductService\
     \
- Controller class\
  \'97> copy ProductController\
  -> in get all method\
     \'97> replace return value: 
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 ResponseEntity<List<Product>>
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
     \'97> use @ResponseBody to send data back to client \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2      \'97> use @RequestParam to take paging values\
     \'97> just return 
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 Page<Product>, and spring will take \
         take of JSON conversion
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
  -> set application properties for embedded tomcat,\
     MySQL database and hibernate\
\
==> test the Microservice for product api:\
    \'97> Run As ->L Spring Boot App   \
\
\
==========================================================\
==========================================================\
\
\
\
   LOGGING \
   Note this does not compile\'85\'85.because\
   - spring boot uses log4j, but better to use sl4j\
   - jpa=interface hibernate=implementation\
   ==> slj is totally decoupled from hibernate implementation \
\
\pard\pardeftab720\partightenfactor0

\f3\b\fs24 \cf9 \cb1 \kerning1\expnd0\expndtw0 	WAS: final
\f0\b0 \cf0  
\f3\b \cf9 static
\f0\b0 \cf0  Logger 
\f4\i\b \cf10 logger
\f0\i0\b0 \cf0  = Logger.\ul getLogger\ulnone (ProductServiceImpl.
\f3\b \cf9 class
\f0\b0 \cf0 );\

\f3\b \cf9 	MIGRATE: final
\f0\b0 \cf0  
\f3\b \cf9 static
\f0\b0 \cf0  Logger 
\f4\i\b \cf10 logger
\f0\i0\b0 \cf0  = LoggerFactory.\ul getLogger\ulnone (ProductServiceImpl.
\f3\b \cf9 class
\f0\b0 \cf0 );
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
    ??? logbook example:\
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul            {\field{\*\fldinst{HYPERLINK "https://www.mkyong.com/spring-boot/spring-boot-slf4j-logging-example/"}}{\fldrslt https://www.mkyong.com/spring-boot/spring-boot-slf4j-logging-example/}}
\f0\fs26 \cf2 \cb3 \ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2    \
\'97> rename ProductDao to Repository\
   Remove Transactional annotations \
   (Spring boot provides this functionality)\
\
\'97> update product ProductService\
\
   - standard other changes:\
     Change ProductService list() to:\
     - Page<Product> getProductsByPage(Integer pageNum, Integer pageSize);\
\
-> update product controller \
-> test controller crud operations with postman  \
-> add aspects\
\
   Aspects are like triggers, they run before or after an event\'85\
   Defined when to run by pointcut: @Before([pointcut here..])\
   This is new in spring boot 2\
\
   This is in addition to the actuator means of examining attributes:\
   
\f2\fs24 \cf5 \cb1 \ul  {\field{\*\fldinst{HYPERLINK "http://localhost:8091/actuator"}}{\fldrslt http://localhost:8091/actuator}}
\f0\fs26 \cf2 \cb3 \ulnone \
   \
==========================================================\
\
-> add exceptions (for later use)\
\
==========================================================\
Add in event handling and build up actuator\
\
-> AbstractController \
\'97> in ProductContoller use superclass method 
\f5\i\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 checkResourceFound
\f0\i0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
-> add ProductEvent\
-> add listener for product\
\'97> removed static and templates directory form resources\
-> throw some asynchronous events from the controller \
\'97> application.yml\
   \'97> configure to expose all endpoints (*)\
   \'97> add in configuration for health endpoint to show details\
\'97> test controller in postman\
\'97> test actuator, especially for health\
   {\field{\*\fldinst{HYPERLINK "http://localhost:8091/actuator/health"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul http://localhost:8091/actuator/health}}\
   Note that disc space is included, and so is MySQL as it is in path\
   Look at metrics, and call again with the parameter name appended\
\
==========================================================\
==========================================================\
Service Discovery & Service Discovery (Microservice design pattern)\
\
1) Push based spring cloud microservice service discovery\
   Ie. microservices \'91push\'92 their ip and port to Eureka\
       Service\
       (Google is pull based)\
   Spring cloud is built on the Netflix Eureka service\
\
   Problem - if hardcoded service breaks, in monolithic architecture\
   it crashes\
\
   - logical name on Eureka service\
   - Eureka will use the name to locate one implementation of the \
     particular service, and there could be multiple containers\
     running with healthy instances of the application\
   - heartbeat sent to Eureka every few seconds to determine health\
\
Benefits of Service Discovery\
- decouples clients from the services they call, no hardcoding its \
- enhance load balancing and availability\
- service discovery has multiple instances\
- central hub for orchestration\
- health information\
- supports others design patterns for micro services\
\
Create new project:\
pb-ecommerce-eureka-service-discovery\
- web\
- Eureka Server\
- actuator\
\'97> below @SpringBootApplication, apply 
\fs24 \cf7 \cb1 \kerning1\expnd0\expndtw0 @EnableEurekaServer 
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
-> delete application.properties + create application.yml + bootstrap.yml\
\
   .yml shows properties in a hierarchy\
   \'97> read early when spring cloud app starts up\
\
\
Deploy: (ignore error in stack trace)\
\'97> localhost:
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 8761
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
  (shows up on Eureka see application.yml)\
\'97> actuator health also states UP:\
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul         {\field{\*\fldinst{HYPERLINK "http://localhost:8080/actuator"}}{\fldrslt http://localhost:8080/actuator}}
\f0\fs26 \cf2 \cb3 \ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
Port already in use:\
\'97> Find processes on 8080:  \cf11 netstat -vanp tcp | grep 3000\
\cf2 -> kill it \
\
==========================================================\
\
   SERVER SIDE\
-> Make sure service registry micro service is compliant\
   with the spring cloud latest version (Eureka)\
\
   Go to spring cloud website to check Eureka version via: \
   projects.spring io/spring-cloud\
\
   Check with Eureka version and spring boot version in \
   discovery pom, if maven complains:\
   - remove current maven repository\
     rm -R repository/\
   - maven - update project\
\
   So in summary, in discovery app:\
   mvn clean package\
   \'97> run discovery app\
   \'97> check:\
      localhost:
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 8761
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\
\'97\'97\'97\'97\'97\'97\'97\'97\
\
   CLIENT SIDE product-api (with the server side running)\
   Register clients with service discovery app\
\
\'97> In product api service app:\
   Open pom of client service (in this case product-api)\
   Make sure boot versions match\
\
  Google for:\
  {\field{\*\fldinst{HYPERLINK "https://spring.io/blog/2019/09/12/spring-cloud-greenwich-sr3-released"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul https://spring.io/blog/2019/09/12/spring-cloud-greenwich-sr3-released}} \
\
  a) Copy dependency management tag into pom of client,\
  product-api spring boot app: \
  This is maven\'92s way of inheriting from a 2nd parent\
\
  b) Add dependency:\
     
\fs24 \cf12 \cb1 \kerning1\expnd0\expndtw0 spring-cloud-starter-netflix-eureka-client
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\
  --> create Bootstrap.yml in product-api\
  \'97-> add service URL of server in client app product-api\
      to application.yml   (see 
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \ul eureka
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\ulnone )\
      \
   Note this is not how to deploy things in production,\
   Where you will have multiple eureka servers running \
\
   \'97> Add 
\fs24 \cf7 \cb1 \kerning1\expnd0\expndtw0 @EnableDiscoveryClient
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
      to main method of client product-api\
\
      mvn clean package of product-api\
\
      Now run product-api in a different shell to server\
      Discovery app\
\
      (Note it registers the service in the console,\
       Check this out in {\field{\*\fldinst{HYPERLINK "http://localhost:8761/"}}{\fldrslt 
\f2\fs24 \cf5 \cb1 \ul \ulc5 http://localhost:8761/}})\
\
==========================================================\
SPRING CLOUD MICROSERVICES REMOTE CONFIG\
\
Microservice Remote Config Service \
- promotes loose coupling of services\
(also a microservices design pattern)\
\
Avoid hardcoding URLs to a single point of failure eg.\
When a server goes down containing critical instance\
\
Danger of defining these in 1 place, or having to maintain\
this same info in many different places:\
- db urls, username + pass\
- message broker perl username + pass\
- Internationalization I118N messages\
\
\
- SO: use remote config service with profiles\
  \'97> decouples microservices from env vars to single point\
     of truth \
  -> do not have to change between dev, test and prod\
\
NOTE: IN PRODUCTION\
\
Microservices layer (product, pricing, delivery etc)\
\'97-> load balancer\
    \'97> remote config service cluster (on multiple machines)\
       \'97> highly available GitHub cluster\
          \'97> GitHub Highly available storage:\
             Micorservice-root\
               Product\
                 Application-dev.yml\
                 Application-prod.yml\
               Payment \
                 [some other yml files etc]\
\
\
**!!!!\
For each micro service, transfer the application.yml to\
a remote GitHub repository\'92s \
\
Removed lines transferring from product-api -> mysql.yml:
\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\pardeftab720\partightenfactor0
\cf0 server:\
  port: 8081\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\
\
\'97-> remove git from monolith-micro-remote-config\
\'97-> save public key from TRT and delete, put into new account\
\'97-> create repository in the new git: {\field{\*\fldinst{HYPERLINK "https://github.com/TRT-PaulB/monolith-micro-remote-config"}}{\fldrslt 
\f6\b\fs36 \cf13 \cb14 \ul \ulc13 monolith-micro-remote-config}}
\f7\fs36 \cf15 \cb14 \

\f0\fs26 \cf2 \cb3 \'97-> init remote with the contents of monolith-micro-remote-config\
\'97-> update the username, pass and uri\
    In pb-ecommerce-remote-config-service / application.yml\
\
\
==> upload code to:\
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul \ulc5            {\field{\*\fldinst{HYPERLINK "https://github.com/PaulJames4748/pb-monolith-micro-remote-config"}}{\fldrslt https://github.com/PaulJames4748/pb-monolith-micro-remote-config}}\
\pard\pardeftab720\sl280\partightenfactor0

\f0\fs26 \cf2 \cb3 \ulnone \
    TEST THE REMOTE CONFIG SERVICE \
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 ==> Run the remote config service as a spring boot app\
\
==> test product api in browser\
    Make changes and be sure they are picked up in the browser.\
    Can the localyml files actually be removed?\
    localhost:9000/pb-eccommerce-product-api/mysql\
\
\
==> implement further modules\
    implement the same for:\
\pard\pardeftab720\partightenfactor0

\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \ul \ulc0     pb\ulnone -\ul ecommerce\ulnone -category-\ul api\ulnone , \ul pb\ulnone -\ul ecommerce\ulnone -pricing-\ul api
\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\ulnone \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf2 \
==> test category and pricing\
\
==========================================================\
\pard\pardeftab720\sl280\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul \ulc5 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 \ulnone COURSE PLAN FROM START CHAPTER 9\
\
- revise up to know, including ch8 remote config service test\
- ch9, 10\
- 11\
- 12,13\
\
- 14\
- 15\
- 16\
- 17\
\
- 18\
- 19\
- 20\
- 21\
\
22 - w\
23, 24, 25\
26\
\
==========================================================\
\
\
\
\
\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs24 \cf5 \cb1 \ul \
\pard\pardeftab720\sl280\partightenfactor0
\cf5 \
\
\
\
\
\
\
\
\
\
\
\pard\pardeftab720\sl280\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/rollingstoneecomm/rollingstone-ecommerce-remote-config-repository"}}{\fldrslt \cf5 \uc0\u8776 }}}