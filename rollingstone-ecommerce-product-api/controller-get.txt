****************** GETS:

@GetMapping("/group/{id}")
    ResponseEntity<?> getGroup(@PathVariable Long id) {
        Optional<Group> group = groupRepository.findById(id);
        return group.map(response -> ResponseEntity.ok().body(response))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

return ResponseEntity.ok().body(logoutDetails);



@GetMapping("/private")
    public String redirectToRoot() {
    	return "redirect:/";
    }
    
    @GetMapping("/")
	public String home() {
		return ("<h1>Welcome All!</h1>");
	}



@GetMapping("/groups")
    Collection<Group> groups(Principal principal) {
        return groupRepository.findAllByUserId(principal.getName());
    }

    @GetMapping("/group/{id}")
    ResponseEntity<?> getGroup(@PathVariable Long id) {
        Optional<Group> group = groupRepository.findById(id);
        return group.map(response -> ResponseEntity.ok().body(response))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

@GetMapping("/current/{userId}")
    ResponseEntity<?> getCurrentBasket(@PathVariable Integer userId) throws URISyntaxException {
		try {
			Basket basket = basketService.getCurrentBasket(userId);
			logger.info("basket created = " + basket.getId());
			return ResponseEntity.ok().body(basket);
		} catch(Throwable t) {
			logger.info("no basket available for user with id: " + userId);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
    }
    
@GetMapping("/{start}/{destination}")
	public ResponseEntity<RouteQuery> getRouteQuery(@PathVariable String start, @PathVariable String destination) throws URISyntaxException {
		logger.info("making a route query: start = " + start + " --> dest = " + destination);
		JourneySummary journey = travelInfoService.getJourneyDetails(start, destination);
		try {
			RouteQuery route = new RouteQuery(start, destination, journey.getRouteInfo());
			return ResponseEntity.ok().body(route);
		} catch(Throwable t) {
			// in case of an issue not handled in TravelInfoService
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}
    
    @GetMapping("/contact/{userId}")
	public ResponseEntity<ContactDetails> getUser(@PathVariable Integer userId) {
		Optional<ContactDetails> contactDetails = registrationService.findContactDetailsByUserId(userId);
		return contactDetails.map(response -> ResponseEntity.ok().body(response)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
	}

@GetMapping("/member/pm/{userId}")
	ResponseEntity<List<PaymentMethod>> getPaymentMethods(@PathVariable Integer userId) {
		 logger.info("Searching payment methods for user: " + userId);
		 Optional<List<PaymentMethod>> optPayMeths = paymentMethodService.getAllPaymentMethodsByUser(userId);
		 return optPayMeths.map(response -> ResponseEntity.ok().body(response)).orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
	}


   @GetMapping("/product/{id}")
   public ResponseEntity<Product> getProduct(@PathVariable("id") long id) {
	  Optional<Product> returnedProduct = productService.get(id);
	  Product product  = returnedProduct.get(); 
	  
	  ProductEvent productCreatedEvent = new ProductEvent("One Product is retrieved", product);
      eventPublisher.publishEvent(productCreatedEvent);
      return ResponseEntity.ok().body(product);
   }


@GetMapping("/product")
   public @ResponseBody Page<Product> getProductsByPage(
		   @RequestParam(value="pagenumber", required=true, defaultValue="0") Integer pageNumber,
		   @RequestParam(value="pagesize", required=true, defaultValue="20") Integer pageSize) {
      Page<Product> pagedProducts = productService.getProductsByPage(pageNumber, pageSize);
      return pagedProducts;
   }


public ResponseEntity<SomeType> getSearchListByTtitle()

—> HttpHeaders responseHeaders = new HttpHeaders();
—> responseHeaders.setAccessControlAllowOrigin(“*”);
—> SR sr = new SR();
   Sr.setPage(pageNumber.orElse(1) * 2); 
   Sr.setTotalProducts(countPerPage.orElse(1) * 2);
   For each object:
   —> sr.getData().add the object

—> logging
—> return new ResponseEntity<ObjectType>(sr, reponseHeaders, HttpStatus.OK)
 
SearchRepresentation
—> int totalProducts
-> int page
